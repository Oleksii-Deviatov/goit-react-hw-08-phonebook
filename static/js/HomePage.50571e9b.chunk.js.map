{"version":3,"sources":["components/Contact/styles.module.css","redux/contacts/contacts-selectors.js","components/ContactForm/ContactForm.jsx","redux/contacts/contacts-operations.js","components/Filter/Filter.jsx","components/Contact/Contact.jsx","components/ContactList/ContactList.jsx","components/Home/Home.jsx"],"names":["module","exports","getFilter","state","contacts","filter","getAllContacts","getLoading","loading","getVisibleContacts","createSelector","normalizedFilter","toLowerCase","name","includes","connect","dispatch","addContact","data","value","actions","axios","post","then","catch","error","useState","inputName","setInputName","inputNumber","setInputNumber","onSubmit","e","preventDefault","find","toast","number","autoComplete","Box","display","flexDirection","TextField","label","onChange","target","margin","required","Button","variant","type","color","delContact","id","delete","operations","ListItem","disableGutters","Card","className","styles","card","CardActionArea","CardContent","justifyContent","IconButton","component","onClick","fetchContacts","a","get","useEffect","List","map","Contact","isLoading","Container","maxWidth","Spinner","Typography","align","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover"],"mappings":"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","file":"static/js/HomePage.50571e9b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"styles_card__2pija\"};","import { createSelector } from '@reduxjs/toolkit';\n\nconst getFilter = state => state.contacts.filter;\n\nconst getAllContacts = state => state.contacts.contacts;\n\nconst getLoading = state => state.contacts.loading;\n\nconst getVisibleContacts = createSelector(\n  [getAllContacts, getFilter],\n  (contacts, filter) => {\n    const normalizedFilter = filter.toLowerCase();\n\n    return contacts.filter(({ name }) =>\n      name.toLowerCase().includes(normalizedFilter),\n    );\n  },\n);\n\nexport { getFilter, getVisibleContacts, getAllContacts, getLoading };\n","import { useState } from 'react';\nimport { TextField, Button, Box } from '@material-ui/core';\nimport { connect } from 'react-redux';\nimport { getAllContacts } from '../../redux/contacts/contacts-selectors';\nimport * as operations from '../../redux/contacts/contacts-operations';\n\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nfunction ContactForm({ contacts, addContact }) {\n  const [inputName, setInputName] = useState('');\n  const [inputNumber, setInputNumber] = useState('');\n\n  function inputNameHandler({ target: { value } }) {\n    setInputName(value);\n  }\n\n  function inputNumberHendler({ target: { value } }) {\n    setInputNumber(value);\n  }\n\n  function clrForm() {\n    setInputName('');\n    setInputNumber('');\n  }\n\n  function submitHendler(e) {\n    e.preventDefault();\n\n    function checkExistContact() {\n      return !!contacts.find(\n        ({ name }) => name.toLowerCase() === inputName.toLowerCase(),\n      );\n    }\n\n    switch (true) {\n      case inputName === '':\n        return;\n\n      case checkExistContact():\n        toast.error(`${inputName} already exist`);\n        return;\n\n      default:\n        addContact({ name: inputName, number: inputNumber });\n        clrForm();\n        break;\n    }\n  }\n\n  return (\n    <form onSubmit={submitHendler} autoComplete=\"off\">\n      <Box display=\"flex\" flexDirection=\"column\">\n        <TextField\n          label=\"Name\"\n          value={inputName}\n          onChange={inputNameHandler}\n          margin=\"dense\"\n          required\n        />\n        <TextField\n          label=\"Number\"\n          value={inputNumber}\n          onChange={inputNumberHendler}\n          margin=\"dense\"\n        />\n        <Button variant=\"outlined\" type=\"submit\" color=\"primary\">\n          add contact\n        </Button>\n      </Box>\n    </form>\n  );\n}\n\nconst mapStateToProps = state => {\n  return {\n    contacts: getAllContacts(state),\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    addContact: data => dispatch(operations.addContact(data)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\n","import axios from 'axios';\nimport * as actions from './contacts-actions';\n\nconst fetchContacts = () => async dispatch => {\n  dispatch(actions.fetchContactsRequest());\n\n  try {\n    const { data } = await axios.get('/contacts');\n\n    dispatch(actions.fetchContactsSuccess(data));\n  } catch (error) {\n    dispatch(actions.fetchContactsError(error));\n  }\n};\n\nconst addContact = value => dispatch => {\n  dispatch(actions.addContactsRequest());\n\n  axios\n    .post('/contacts', value)\n    .then(({ data }) => dispatch(actions.addContactsSuccess(data)))\n    .catch(error => dispatch(actions.addContactError(error)));\n};\n\nconst delContact = id => dispatch => {\n  dispatch(actions.delContactsRequest());\n\n  axios\n    .delete(`/contacts/${id}`)\n    .then(() => dispatch(actions.delContactsSuccess(id)))\n    .catch(error => dispatch(actions.delContactsError(error)));\n};\n\nexport { fetchContacts, addContact, delContact };\n","import { connect } from 'react-redux';\nimport { TextField, Box } from '@material-ui/core';\nimport { getFilter } from '../../redux/contacts/contacts-selectors';\nimport * as actions from '../../redux/contacts/contacts-actions';\n\nfunction Filter({ onChange, value }) {\n  function inputFilterHendler({ target: { value } }) {\n    onChange(value);\n  }\n\n  return (\n    <form autoComplete=\"off\">\n      <Box display=\"flex\" flexDirection=\"column\">\n        <TextField\n          // id=\"standard-basic\"\n          label=\"find contact by name\"\n          value={value}\n          onChange={inputFilterHendler}\n          margin=\"dense\"\n        />\n      </Box>\n    </form>\n  );\n}\n\nconst mapStateToProps = state => {\n  return {\n    value: getFilter(state),\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onChange: value => dispatch(actions.changeFilter(value)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import {\n  Card,\n  CardContent,\n  IconButton,\n  Box,\n  CardActionArea,\n} from '@material-ui/core';\nimport DeleteForeverTwoToneIcon from '@material-ui/icons/DeleteForeverTwoTone';\nimport { connect } from 'react-redux';\nimport styles from './styles.module.css';\nimport ListItem from '@material-ui/core/ListItem';\nimport * as operations from '../../redux/contacts/contacts-operations';\n\nfunction Conact({ id, name, number, delContact }) {\n  return (\n    <ListItem disableGutters={true}>\n      <Card variant=\"outlined\" className={styles.card}>\n        <CardActionArea>\n          <CardContent>\n            <Box display=\"flex\" justifyContent=\"space-between\">\n              <p>\n                {name}: {number}\n              </p>\n              <IconButton\n                color=\"primary\"\n                component=\"span\"\n                onClick={() => delContact(id)}\n              >\n                <DeleteForeverTwoToneIcon />\n              </IconButton>\n            </Box>\n          </CardContent>\n        </CardActionArea>\n      </Card>\n    </ListItem>\n  );\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    delContact: id => dispatch(operations.delContact(id)),\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(Conact);\n","import Contact from '../Contact';\nimport { List } from '@material-ui/core';\nimport { connect } from 'react-redux';\nimport { getVisibleContacts } from '../../redux/contacts/contacts-selectors';\nimport * as operations from '../../redux/contacts/contacts-operations';\nimport { useEffect } from 'react';\n\nfunction ContactList({ contacts, fetchContacts }) {\n  useEffect(() => {\n    fetchContacts();\n  }, []);\n\n  return (\n    <List>\n      {contacts.map(({ id, name, number }) => {\n        return <Contact key={id} id={id} name={name} number={number} />;\n      })}\n    </List>\n  );\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    fetchContacts: () => dispatch(operations.fetchContacts()),\n  };\n};\n\nconst mapStateToProps = state => ({\n  contacts: getVisibleContacts(state),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n","import ContactForm from '../ContactForm';\nimport Filter from '../Filter';\nimport ContactList from '../ContactList';\nimport Spinner from '../Spinner';\nimport { Container, Typography } from '@material-ui/core';\nimport { ToastContainer } from 'react-toastify';\nimport { connect } from 'react-redux';\nimport { getLoading } from '../../redux/contacts/contacts-selectors';\n\nfunction Home({ isLoading }) {\n  return (\n    <>\n      <Container maxWidth=\"xs\">\n        {isLoading && <Spinner />}\n\n        <Typography align=\"center\" variant=\"h2\">\n          Phonebook\n        </Typography>\n        <ContactForm />\n\n        <Typography align=\"center\" variant=\"h4\">\n          Contacts\n        </Typography>\n        <Filter />\n\n        <ContactList />\n      </Container>\n      <ToastContainer\n        position=\"top-right\"\n        autoClose={2000}\n        hideProgressBar={false}\n        newestOnTop={false}\n        closeOnClick\n        rtl={false}\n        pauseOnFocusLoss\n        draggable\n        pauseOnHover\n      />\n    </>\n  );\n}\n\nconst mapStateToProps = state => {\n  return {\n    isLoading: getLoading(state),\n  };\n};\n\nexport default connect(mapStateToProps)(Home);\n"],"sourceRoot":""}